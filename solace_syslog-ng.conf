# Aaron's Solace Configuration for syslog-ng
# Copyright 2018
# Last tested againt syslog-ng v3.5.6
#
# You might have to rename this file to 'syslog-ng.conf' to get picked up, or add an include in the main conf file

# Useful: https://docs.solace.com/System-and-Software-Maintenance/Monitoring-Events-Using-Syslog.htm

@version:3.5
@include "scl.conf"

options {
    flush-lines (0);        # send Syslog messages to log immediately
    flush-timeout (2000);   # 2 seconds... probably ignored though due to above
    time-reopen (10);
    log-fifo-size (20000);
    chain-hostnames (off);
    use-dns (no);
    use-fqdn (no);
    create-dirs (yes);      # force it to create directory structure
    keep-hostname (yes);    # use the hostname from the Syslog message
    perm (0644);            # world readable logs
    dir-perm (0755);        # world readable/searchable directories
    frac-digits (3);        # millisecond timestamps
};

# Where am I gonna send my logs?
@define logpath "/var/log/solace/syslog-ng"

# Sources
#########
# By separating Solace devices by dev, test, and prod, I could implement different rules & filtering below
# (e.g. logging to a different location, or escalating some events to higher severities).
# Simply point the Solace external syslog host to the appropriate port, based on the classification of that router
source s_tcp_dev       { tcp(ip(0.0.0.0) port(51410) log_fetch_limit(10) log_iw_size(3000) max-connections(300)); };
source s_tcp_test      { tcp(ip(0.0.0.0) port(51411) log_fetch_limit(10) log_iw_size(3000) max-connections(300)); };
source s_tcp_prd       { tcp(ip(0.0.0.0) port(51412) log_fetch_limit(10) log_iw_size(3000) max-connections(300)); };


# Parsers
#########
# For SYSTEM events, parse the message into the component parts 
parser p_solace_event {
    csv-parser(columns("SOL_EVENTTYPE", "SOL_EVENT", "SOL_BODY")
    delimiters(" ")
    flags(greedy, escape-none)
    template("${MSG}"));
};
# For VPN and CLIENT events, include the additional VPN name
parser p_solace_vpn_event {
    csv-parser(columns("SOL_EVENTTYPE", "SOL_EVENT", "SOL_VPN", "SOL_BODY")
    delimiters(" ")
    flags(greedy, escape-none)
    template("${MSG}"));
};


### Templates
template t_command_format   { template("${ISODATE} ${HOST} ${PROGRAM}: ${MSG}\n");          template_escape(no); }; # used by command logs
template t_event_format  { template("${ISODATE} <${LEVEL}> ${HOST} ${PROGRAM}: ${MSG}\n"); template_escape(no); }; # used by event logs


### Destinations
destination d_command {        file("`logpath`/router_${HOST}/command.log" template(t_command_format) ); };
#destination d_user_command {   file("`logpath`/router_${HOST}/user.log"            template(t_command_format) ); };

destination d_alerts {         file("`logpath`/alerts/alerts.log"        template(t_event_format) ); };
destination d_event {          file("`logpath`/router_${HOST}/event.log"   template(t_event_format) ); };
#destination d_auth_event {     file("`logpath`/router_${HOST}/auth.log"    template(t_event_format) ); };
#destination d_system {         file("`logpath`/router_${HOST}/system.log"  template(t_event_format) ); };

#destination d_vpn_event {         file("`logpath`/router_${HOST}/vpn.${SOL_VPN}/event.log"  template(t_event_format) ); };


### Standard filters - Solace uses facilities local3 for events and local1 for commands
filter f_event {        facility(local3); };
filter f_system {       facility(local4); };  # I don't want to use this
filter f_command {      facility(local1); };
filter f_user_command { facility(local1) and (
    message(' SHELL') or
   (message(' CLI/')  and not message('> show ') and not message('# show ') and not message('> no pag')) or
   (message(' SEMP/') and not message('  show ') and not message('parse error')));
};


### Custom filters - i.e. rules to capture the messages for custom processing
filter f_crit {          facility(local3) and level(crit); };
filter f_err {           facility(local3) and level(err); };
filter f_warning {       facility(local3) and level(warning); };
filter f_notice {        facility(local3) and level(notice); };
filter f_info {          facility(local3) and level(info); };
filter f_warn_and_up {   facility(local3) and level(warning..emerg); };
filter f_notice_and_up { facility(local3) and level(notice..emerg); };

filter f_system_ha_act_state_up {  match('SYSTEM_HA_ACT_STATE_UP:' value("SOL_EVENT")); };
filter f_system_eventable {        match('SYSTEM:' value("SOL_EVENTTYPE"))
                                   and (filter(f_warn_and_up) or filter(f_system_ha_act_state_up)); };
filter f_auth_event {              match('SYSTEM_AUTHENTICATION_SESSION_OPENED' value("SOL_EVENT"))
                                   or match('SYSTEM_AUTHENTICATION_SESSION_CLOSED' value("SOL_EVENT")); };
filter f_vpn_or_client_event {     match('VPN:' value("SOL_EVENTTYPE")) or match('CLIENT:' value("SOL_EVENTTYPE")); };

## Don't want these events getting put into the 'alertable' log (because they're WARN level) - essentially, they will be suppressed
filter f_vpn_vpn_state_change { match('VPN_VPN_STATE_CHANGE:' value("SOL_EVENT")); };
filter f_client_bind_failed { match('CLIENT_CLIENT_BIND_FAILED:' value("SOL_EVENT")); };




log { source(s_tcp_prd); source(s_tcp_test); source(s_tcp_dev); filter(f_event);   destination(d_event);   flags(flow-control); };
log { source(s_tcp_prd); source(s_tcp_test); source(s_tcp_dev); filter(f_command); destination(d_command); flags(flow-control); };


