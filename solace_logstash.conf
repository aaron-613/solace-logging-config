# "message" : "CLI/1        192.168.42.35    alee              02:31:50  02:31:50  ok                              (configure/syslog)# logout\n",
# "message" : "SEMP/mgmt    192.168.42.243   alee              02:38:21  02:38:21  ok                              client-profile message-spool allow-guaranteed-message-send\n",
# Syslog-NG:
# 2018-01-16T02:31:46.000+08:00 sg-sol-3501-vmr alee: CLI/1        192.168.42.35    alee              02:31:45  02:31:46  ok                              (configure/syslog)# host 192.168.42.35:51420 transport tcp
# RSyslog:
# 2018-01-16T02:31:46+08: sg-sol-3501-vmr alee[8671]: CLI/1        192.168.42.35    alee              02:31:45  02:31:46  ok                              (configure/syslog)# host 192.168.42.35:51420 transport tcp
#
#############################################################################################################

#HELOO! 2


input {
  syslog {
    port => "51420"
    add_field => { "env" => "dev" }
    severity_labels => [ "emerg", "alert", "crit", "error", "warn", "notice", "info", "debug" ]
  }
  syslog {
    port => "51421"
    add_field => { "env" => "test" }
    severity_labels => [ "emerg", "alert", "crit", "error", "warn", "notice", "info", "debug" ]
  }
  syslog {
    port => "51422"
    add_field => { "env" => "prod" }
    severity_labels => [ "emerg", "alert", "crit", "error", "warn", "notice", "info", "debug" ]
  }
}

filter {
  if [facility_label] == "local1" {  # command log
    # for command log, don't need severity, pid may be useful, program is username, but actual username is in message (i.e. program will show 'support' but not actual logged in user, etc.
    # for command log, don't need severity, pid may be useful, program is username, but actual username is in message (i.e. program will show 'support' but not actual logged in user, etc.
    grok {
      break_on_match => "false"
      # for command log, don't need severity, priority, or facility
      remove_field => [ "severity", "severity_label", "priority", "facility" ]
      #add_field => { "status" => "successfullly inside local1 block" }
# ending timestamps aren't always there, and sometimes the status is multiword
# /message-vpn)# max-connections 99
# 2018-01-16T06:04:01+08: sg-sol-3501-vmr alee[8745]: CLI/1        192.168.42.243   alee              06:04:01  pre-execution                             (configure)# syslog external
# 2018-01-16T06:04:01+08: sg-sol-3501-vmr alee[8745]: CLI/1        192.168.42.243   alee              06:04:01  06:04:01  changed mode                    (configure)# syslog external
# 2018-01-16T06:04:05+08: sg-sol-3501-vmr alee[8745]: CLI/1        192.168.42.243   alee              06:04:04  06:04:05  ok                              (configure/syslog)# facility event
# 2018-01-16T05:28:35.331+00:00 <local1.info> emea1 support[27378]: SHELL        CLI/1            alee              ---       ---       ---                             (/usr/sw/support) id -un
# 2018-01-16T05:28:35.332+00:00 <local1.info> emea1 support[27380]: SHELL        CLI/1            alee              ---       ---       ---                             (/usr/sw/support) /usr/bin/hostname
#
      #match => { "message" => "%{NOTSPACE:solace_cmd_method} {2,}%{IPORHOST:solace_cmd_source_host} {2,}%{NOTSPACE:solace_cmd_userid} {2,}%{NOTSPACE:solace_cmd_starttime}(?:  %{NOTSPACE:solace_cmd_endtime})  %{DATA:solace_cmd_status_code} {2,}%{GREEDYDATA:solace_cmd_cmd}" }
      match => { "message" => "^%{NOTSPACE:solace_cmd_method} {2,}%{NOTSPACE:solace_cmd_source} {2,}%{NOTSPACE:solace_cmd_userid} {2,}%{DATA:solace_cmd_execution_details} {8,}%{GREEDYDATA:solace_cmd_cmd}" }
      match => { "solace_cmd_execution_details" => "^%{NOTSPACE:solace_cmd_execution_start}(?: {2,}%{NOTSPACE:solace_cmd_execution_end})? {2,}%{GREEDYDATA:solace_cmd_execution_result}" }
      remove_field => [ "solace_cmd_execution_details" ]
      # grab everything from ^ until # or > as the cmd_level, then after is actual command 
    }
    if [solace_cmd_cmd] =~ /^\(?.*?[#>] show/ {
      mutate {
        #add_tag => [ "show" ]
        add_field => { "[@metadata][command]" => "show" }
        gsub => [ "solace_cmd_cmd", "^\(?.*?[#>] ", "" ] 
        strip => [ "solace_cmd_cmd" ]
      }
    } else {
      mutate {
        #add_tag => [ "config" ]
        add_field => { "[@metadata][command]" => "config" }
        strip => [ "solace_cmd_cmd" ]
      }
    }



  #################################################
  # EVENT LOG
  ##################################################
  } else if [facility_label] == "local3" {
    #syslog_pri { }
    grok {
      #add_tag => [ "event" ]
      add_field => { "[@metadata][event]" => "something" }
      match => { "message" => "^%{WORD:solace_event_scope}: %{USERNAME:solace_event_name}: %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
      remove_field => [ "priority", "facility" ]
    } 
    if [program] != "event" {  # i.e. that means the log-tag is set, either for the system, or the VPN
      grok {
#                 "program" => "DEFLOGSINFO",
        #pattern_definitions => { "solace_program ^.*?.{4}$" }
        #match => { "program" => "(?<event_log_tag>})$"
      }
    }
    if [solace_event_scope] == "SYSTEM" {
      #mutate { add_field => { "status" => "SYSTEM LOG!!!!" } }
      grok {
        match => { "message" => "^- - %{GREEDYDATA:message}" }  # chop those stupid - - marks
        overwrite => [ "message" ]
      }
    } else if [solace_event_scope] == "VPN" {
      #mutate { add_field => { "status" => "VPN level LOG!!!!" } }
      grok {
        # The VPN name is repeated, so just strip out the first one
        match => { "message" => "%{DATA:vpn_name} - Message VPN \([0-9]+\) %{GREEDYDATA:message}" }
        # the following uses backreferences to remove the 2nd vpn name as well, but I don't need that
        #match => { "message" => "(?<vpn_name>%{DATA}) - Message VPN \([0-9]+\) \k<vpn_name> %{GREEDYDATA:message}" }
        overwrite => [ "message" ]
      }
    } else {
      #mutate { add_field => { "status" => "CLIENT level LOG!!!!" } }
      grok {
        # the following strips out the VPN name from the beginning of the log
        #match => { "message" => "^%{NOTSPACE:vpn_name} %{GREEDYDATA:message}" }
        #overwrite => [ "message" ]
        match => { "message" => "^%{NOTSPACE:vpn_name}" }  # just grab the VPN name but leave the message alone
      }
    }
  } else {
    mutate { add_field => { "status" => "NOPE!  Did not make it inside local1 block" } }
  }
}





output {

  if "_grokparsefailure" in [tags] {
    file { 
      path => "/tmp/solace_logs_parse_failed.log"
      codec => rubydebug { "metadata" => "true" }
    }
  } else {  # no parsing errors, stick into elastic!
    if "event" in [@metadata] {
      elasticsearch {
        hosts => ["localhost:9200"]
        index => "sol-event-%{+YYYY.MM.dd}"
      }
    } else if [@metadata][command] == "show" {
      elasticsearch {
        hosts => ["localhost:9200"]
        index => "sol-cmd-show-%{+YYYY.MM.dd}"
      }
    } else if [@metadata][command] == "config" {
      elasticsearch {
        hosts => ["localhost:9200"]
        index => "sol-cmd-cfg-%{+YYYY.MM.dd}"
      }
    }
  }
  file {
    path => "/tmp/solace.log"
    codec => rubydebug { "metadata" => "true" }
  }
}

