#############################################################################################################

input {
  syslog {
    port => "51420"
    add_field => { "solace_env" => "dev" }
    severity_labels => [ "emerg", "alert", "crit", "error", "warn", "notice", "info", "debug" ]
  }
  syslog {
    port => "51421"
    add_field => { "solace_env" => "test" }
    severity_labels => [ "emerg", "alert", "crit", "error", "warn", "notice", "info", "debug" ]
  }
  syslog {
    port => "51422"
    add_field => { "solace_env" => "prod" }
    severity_labels => [ "emerg", "alert", "crit", "error", "warn", "notice", "info", "debug" ]
  }
}

filter {

  mutate {
    add_field => { "[@metadata][fileoutput]" => "true" }
    add_field => { "[@metadata][debug]" => "true" }
  }

  ruby {
    code => "event.set('localdate', event.get('@timestamp').time.localtime.strftime('%Y-%m-%dT%H:%M:%S.%3N%z'))"
  }

  if [facility_label] == "local1" {
    # command log
    grok {
      # for command log, don't need severity, priority, or facility
      remove_field => [ "severity", "severity_label", "priority", "facility" ]
# ending timestamps aren't always there, and sometimes the status is multiword
# 2018-01-16T06:04:05+08: sg-sol-3501-vmr alee[8745]: CLI/1        192.168.42.243   alee              06:04:04  06:04:05  ok                              (configure/syslog)# facility event

      # ok, so command log message will look something like:
      # CLI/1        192.168.42.243   alee              06:04:01  pre-execution                             (configure)# syslog external
      # CLI/1        192.168.42.243   alee              06:04:01  06:04:01  changed mode                    (configure)# syslog external
      # CLI/1        192.168.42.243   alee              06:04:04  06:04:05  ok                              (configure/syslog)# facility event
      # CLI/1        192.168.42.243   alee              06:04:06  06:04:06  ok                              (configure/syslog)# exit
      #  or 
      # SHELL        CLI/1            alee              ---       ---       ---                             (/usr/sw/support) ls /usr/sw/jail/logs
      break_on_match => "false"
      match => { "message" => "^%{NOTSPACE:solace_cmd_method} {2,}%{NOTSPACE:solace_cmd_source} {2,}%{NOTSPACE:solace_cmd_userid} {2,}%{DATA:solace_cmd_execution_details} {8,}%{GREEDYDATA:solace_cmd_cmd}" }
      match => { "solace_cmd_execution_details" => "^%{NOTSPACE:solace_cmd_execution_start}(?: {2,}%{NOTSPACE:solace_cmd_execution_end})? {2,}%{GREEDYDATA:solace_cmd_execution_result}" }
      remove_field => [ "solace_cmd_execution_details" ]
    }
    if [solace_cmd_cmd] =~ /^\(?.*?[#>] show/ {
      mutate {
        # this is a show command, not a config command
        add_field => { "[@metadata][command]" => "show" }
        # grab everything from ^ (beginning of line) until # or > as the cmd_level (e.g. '(configure)#'), then after is actual command 
        gsub => [ "solace_cmd_cmd", "^\(?.*?[#>] ", "" ] 
        # remove any whitespaces
        strip => [ "solace_cmd_cmd","message" ]
      }
    } else {
      mutate {
        add_field => { "[@metadata][command]" => "config" }
        strip => [ "solace_cmd_cmd","message" ]
      }
    }

  #################################################
  # EVENT LOG
  ##################################################
  } else if [facility_label] == "local3" {
    grok {
      add_tag => [ "%{logsource}" ]
      match => { "message" => "^%{WORD:solace_event_scope}: %{USERNAME:solace_event_name}: %{GREEDYDATA:solace_message}" }
      add_tag => [ "%{solace_event_name}" ]
    }
    # check to see if the event log tag is set
    if [program] != "event" {
      # means that event log tag is set for this router or VPN
      grok {
        # strip off the last 4 chars, as they are the severity (e.g. 'aaronvpnNOTI' --> 'aaronvpn')
        match => { "program" => "^%{DATA:solace_event_log_tag}.{4}$" }
      }
    }
    mutate {
      # don't need priority or facility
      remove_field => [ "priority", "facility" ]
      # get rid of whitesapce at end of line
      strip => [ "message", "solace_message" ]
    }

    if [solace_event_scope] == "SYSTEM" {
      grok {
        match => { "solace_message" => "^- - %{GREEDYDATA:solace_message}" }  # chop those stupid - - marks
        overwrite => [ "solace_message" ]
      }
      if "SYSTEM_AUTHENTICATION_SESSION_OPENED" in [solace_event_name] or "SYSTEM_AUTHENTICATION_SESSION_CLOSED" in [solace_event_name] {
        mutate { add_field => { "[@metadata][event]" => "auth" } }
      } else {
        mutate { add_field => { "[@metadata][event]" => "system" } }
        if [severity <= 5 or
            "CLEAR" in [solace_event_name] or
            "UP" in [solace_event_name] or
            "ENABLE" in [solace_event_name] {
          mutate { add_field => { "[@metadata][alert]" => "true" } }
        }
      }
    } else {
      if [solace_event_scope] == "VPN" {
        #mutate { add_field => { "status" => "VPN level LOG!!!!" } }
        grok {
          add_field => { "[@metadata][event]" => "vpn" }
          # The VPN name is repeated, so just strip out the first one
          #match => { "solace_message" => "(?<solace_vpn_name>%{DATA}) - Message VPN \([0-9]+\) \k<solace_vpn_name> %{GREEDYDATA:solace_message}" }
          match => { "solace_message" => "(?<solace_vpn_name>%{DATA}) - Message VPN \([0-9]+\) %{GREEDYDATA:solace_message}" }
          overwrite => [ "solace_message" ]
          add_tag => [ "%{solace_vpn_name}" ]
        }
        mutate { replace => { "solace_message" => "Message VPN %{solace_message}" } }
      } else if [solace_event_scope] == "CLIENT" {
        grok {
          add_field => { "[@metadata][event]" => "client" }
          match => { "solace_message" => "^%{NOTSPACE:solace_vpn_name} (?<solace_client_name>%{DATA}) Client \([0-9]+\) %{GREEDYDATA:solace_message}" }
          overwrite => [ "solace_message" ]
          add_tag => [ "%{solace_vpn_name}" ]
          add_tag => [ "%{solace_client_name}" ]
        }
        mutate { replace => { "solace_message" => "Client %{solace_message}" } }
      } else {
        # didn't match SYSTEM, VPN, or CLIENT??
        mutate {
          add_tag => [ "NOTHING event" ]
        }
      }
      # this is where we'll have the alertable bits
      if [severity <= 4 or
          "CLEAR" in [solace_event_name] or
          "UP" in [solace_event_name] or
          "DOWN" in [solace_event_name] or
          "ENABLE" in [solace_event_name] or
          "VPN_SOLCACHE" in [solace_event_name] or
          "VPN_BRIDGING_LINK" in [solace_event_name] and
          !([solace_event_name] == "CLIENT_CLIENT_BIND_FAILED" or
            [solace_event_name] == "VPN_VPN_STATE_CHANGE" or
            "VPN_SERVICE" in [solace_event_name]) {
        mutate { add_field => { "[@metadata][alert]" => "true" } }
      }
    }

  #################################################
  # SYSTEM LOG
  ##################################################
  } else if [facility_label] == "local4" {
    mutate { add_field => { "[@metadata][system]" => "system.log" } }
  } else {
    mutate { add_field => { "status" => "Did not match local1, local3, or local4!" } }
  }
}





output {

  if "_grokparsefailure" in [tags] {
    file { 
      path => "/tmp/solace_logs_parse_failed.log"
      codec => rubydebug { "metadata" => "true" }
    }
  } else {  # no parsing errors, stick into elastic!
    if "event" in [@metadata] {
      if [@metadata][event] != "auth" {
        elasticsearch {
          hosts => ["localhost:9200"]
          index => "sol-event-%{+YYYY.MM.dd}"
        }
      }
      if [@metadata][event] == "auth" {
        file {
          path => "/var/log/solace.logstash/router.%{logsource}/auth.log"
          codec => line { format => "%{localdate} <%{severity_label}> %{logsource} %{program}: %{message}"}
        }
      } else {
        file {
          path => "/var/log/solace.logstash/router.%{logsource}/event.log"
          codec => line { format => "%{localdate} <%{severity_label}> %{logsource} %{program}: %{message}"}
        }
      }
      if "alert" in [@metadata] {
        file {
          path => "/var/log/solace.logstash/alerts.log"
          codec => line { format => "%{localdate} <%{severity_label}> %{logsource} %{program}: %{message}"}
        }
      }
    } else if [@metadata][command] == "show" {
      elasticsearch {
        hosts => ["localhost:9200"]
        index => "sol-cmd-show-%{+YYYY.MM.dd}"
      }
      file {
        path => "/var/log/solace.logstash/router.%{logsource}/show.log"
        codec => line { format => "%{localdate} %{logsource} %{program}: %{message}"}
      }
    } else if [@metadata][command] == "config" {
      elasticsearch {
        hosts => ["localhost:9200"]
        index => "sol-cmd-cfg-%{+YYYY.MM.dd}"
      }
      if [@metadata][fileoutput] == "true" {
        file {
          path => "/var/log/solace.logstash/router.%{logsource}/command.log"
          codec => line { format => "%{localdate} %{logsource} %{program}: %{message}"}
        }
      }
    } else if "system" in [@metadata] {
      if [@metadata][fileoutput] == "true" {
        file {
          path => "/var/log/solace.logstash/router.%{logsource}/system.log"
          codec => line { format => "%{localdate} %{logsource} %{program}: %{message}"}
        }
      }
    } else {
      file {
        path => "/tmp/solace_other.log"
        codec => rubydebug { "metadata" => "true" }
      }
    }
  }
  # this will log full entries into /tmp
  if [@metadata][debug] == "true" {
    if "event" in [@metadata] {
      file {
        path => "/tmp/solace.event.log"
        codec => rubydebug { "metadata" => "true" }
      }
    } else if "command" in [@metadata] {
      file {
        path => "/tmp/solace.command.log"
        codec => rubydebug { "metadata" => "true" }
      }
    } else if "system" in [@metadata] {
      file {
        path => "/tmp/solace.system.log"
        codec => rubydebug { "metadata" => "true" }
      }
    }
  }
}

