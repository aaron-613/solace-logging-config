

# Provides TCP syslog reception
module(load="imtcp" MaxSessions="500")
input(type="imtcp" Name="SolaceDev"  Port="51400" Ruleset="sol-rsyslog" RateLimit.Interval="0" RateLimit.Burst="0")
input(type="imtcp" Name="SolaceTest" Port="51401" Ruleset="sol-rsyslog" RateLimit.Interval="0" RateLimit.Burst="0")
input(type="imtcp" Name="SolaceProd" Port="51402" Ruleset="sol-rsyslog" RateLimit.Interval="0" RateLimit.Burst="0")

# allows directories to be created with rwxr-xr-x and files with rw-r--r-- permissions
$umask 0000
$FileCreateMode 0644
$DirCreateMode 0755

# where are the Solace logs getting put?
template(name="CmdLogDir"   type="string" string="/var/log/solace/rsyslog/router_%HOSTNAME%/command.log")
template(name="EventLogDir" type="string" string="/var/log/solace/rsyslog/router_%HOSTNAME%/event.log")
template(name="AlertLog"    type="string" string="/var/log/solace/rsyslog/alert.log")
template(name="NoticeLog"   type="string" string="/var/log/solace/rsyslog/notice.log")

# Solace Command logs with ms timestamps -- have removed the severity as everything is 'info' with command logs
 template(name="CmdLogFormat" type="string" string="%TIMESTAMP:1:23:date-rfc3339%%TIMESTAMP:27:$:date-rfc3339% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")
# millisecond timestamp format for solace event logs
#template(name="EventLogFormat" type="string" string="%TIMESTAMP:1:23:date-rfc3339%%TIMESTAMP:27:$:date-rfc3339% <%syslogfacility-text%.%syslogpriority-text%> %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")
template(name="EventLogFormat" type="string" string="%TIMESTAMP:1:23:date-rfc3339%%TIMESTAMP:27:$:date-rfc3339% <%syslogfacility-text%.%syslogseverity-text%> %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n")
#template(name="EventLogFormat" type="string" string="%TIMESTAMP:1:23:date-rfc3339%%TIMESTAMP:27:$:date-rfc3339% <%syslogfacility-text%.%syslogseverity-text%> %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n[%msg%]\n")


ruleset (name="sol-rsyslog") {
  if ($syslogfacility-text == 'local1') then {  # command logs
    ?CmdLogDir; CmdLogFormat
    stop
  }

  if ($syslogfacility-text == 'local3') then {  # event logs
    # first, log a raw copy of every event message
    ?EventLogDir; EventLogFormat

#   Numerical   |   Severity
#        Code   | 
#   ------------+------------------------------------------
#           0   |   Emergency: system is unusable
#           1   |   Alert: action must be taken immediately
#           2   |   Critical: critical conditions
#           3   |   Error: error conditions
#           4   |   Warning: warning conditions
#           5   |   Notice: normal but significant condition
#           6   |   Informational: informational messages
#           7   |   Debug: debug-level messages

    # let's make a log file containing intresting things... but wouldn't necessarily alert on all of them
    if ($syslogseverity <= 5 and not ($msg startswith ' CLIENT:')) then {
      # so as of here, we have SYSTEM and VPN events of NOTICE and higher
      # now do a bit more filtering
      if (not ($msg contains 'SYSTEM: SYSTEM_AUTHENTICATION_SESSION_OPENED' or
               $msg contains 'SYSTEM: SYSTEM_AUTHENTICATION_SESSION_CLOSED')) then {
        ?NoticeLog; EventLogFormat
      } else {
        # this should log only AUTH messages if the above if statement is working
        /var/log/solace/rsyslog/neg_auth_notice.log; EventLogFormat
      }
    #} else {
      # this should only be CLIENT messages and non-severe SYSTEM/VPN messages
      #/var/log/solace/rsyslog/neg_notice.log; EventLogFormat
    }



    # now do some filtering and make an alertable log
    # note that the message variable actually has a space at the beginning
    #if ($msg startswith ' CLIENT: CLIENT_CLIENT_BIND_FAILED') then ~  # don't log this WARN to alert
    #if ($msg startswith ' VPN: VPN_VPN_STATE_CHANGE') then ~  # don't log this WARN to alert
    #if ($msg startswith ' VPN: VPN_SERVICE_') then ~  # ignore both VPN_SERVICE_LISTEN_PORT_STATE_CHANGE and VPN_SERVICE_SMF_STATE_CHANGE
    # for the alert.log, emit WARN or higher, and anything with CLEAR or UP, e.g. SYSTEM_HA_ACT_STATE_UP
    if ($syslogseverity <= 4 or
        $msg contains '_CLEAR:' or
        $msg contains '_UP:' or
        $msg contains '_DOWN:' or
        $msg contains 'VPN: VPN_SOLCACHE_' or
        $msg contains 'VPN: VPN_BRIDGING_LINK_' and
        not ($msg contains 'CLIENT: CLIENT_CLIENT_BIND_FAILED' or
             $msg contains 'VPN: VPN_VPN_STATE_CHANGE' or
             $msg contains 'VPN: VPN_SERVICE_')) then {
      ?AlertLog; EventLogFormat
    }

    stop
  }
}

